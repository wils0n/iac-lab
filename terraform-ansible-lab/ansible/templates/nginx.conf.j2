# Nginx Load Balancer Configuration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Server: {{ ansible_hostname }}

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss;

    # Backend server pool
    upstream webservers {
        {% for server in groups['webservers'] | default(['web1.example.com', 'web2.example.com']) %}
        server {{ server }}:80 weight=1 max_fails=3 fail_timeout=30s;
        {% endfor %}
        
        # Load balancing method
        least_conn;
        
        # Health checks
        keepalive 32;
    }

    # Default server configuration
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name {{ ansible_hostname }} {{ ansible_fqdn | default('_') }};
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Load balancer status page
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow {{ ansible_default_ipv4.address }};
            deny all;
        }

        # Main proxy configuration
        location / {
            proxy_pass http://webservers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Enable proxy caching for static content
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
                proxy_pass http://webservers;
                proxy_cache_valid 200 1h;
                expires 1h;
                add_header Cache-Control "public, immutable";
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
        }
    }

    # SSL configuration (if needed)
    # server {
    #     listen 443 ssl http2;
    #     server_name {{ ansible_hostname }};
    #     
    #     ssl_certificate /etc/ssl/certs/server.crt;
    #     ssl_certificate_key /etc/ssl/private/server.key;
    #     
    #     location / {
    #         proxy_pass http://webservers;
    #     }
    # }
}

# Configuration managed by Ansible
# Project: {{ project | default('terraform-ansible-lab') }}
# Environment: {{ environment | default('production') }}
# Backend servers: {{ groups['webservers'] | default(['web1.example.com', 'web2.example.com']) | join(', ') }}
# Generated: {{ ansible_date_time.iso8601 }}
