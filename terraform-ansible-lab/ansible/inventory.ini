# Inventario de Ansible - Arquitectura Multi-Grupo
# Este archivo define la estructura de hosts organizados por grupos

# ==============================================
# GRUPO A: SERVIDORES WEB (Frontend)
# ==============================================
[webservers]
# Servidores web frontend - Apache/Nginx
web1.example.com ansible_host=10.0.1.10 ansible_user=ec2-user
web2.example.com ansible_host=10.0.1.11 ansible_user=ec2-user
web3.example.com ansible_host=10.0.1.12 ansible_user=ec2-user

[webservers:vars]
# Variables específicas para servidores web
ansible_ssh_private_key_file=../demo-key.pem
apache_service=httpd
web_root=/var/www/html
server_role=frontend

# ==============================================
# GRUPO B: SERVIDORES DE BASE DE DATOS (Backend)
# ==============================================
[dbservers]
# Servidores de base de datos - MySQL/MariaDB
db1.example.com ansible_host=10.0.2.10 ansible_user=ec2-user
db2.example.com ansible_host=10.0.2.11 ansible_user=ec2-user

[dbservers:vars]
# Variables específicas para servidores de BD
ansible_ssh_private_key_file=../demo-key.pem
mysql_root_password=SecurePass123!
mysql_port=3306
server_role=database

# ==============================================
# GRUPO C: BALANCEADORES DE CARGA (Load Balancers)
# ==============================================
[loadbalancers]
# Balanceadores de carga - Nginx/HAProxy
lb1.example.com ansible_host=10.0.3.10 ansible_user=ec2-user
lb2.example.com ansible_host=10.0.3.11 ansible_user=ec2-user

[loadbalancers:vars]
# Variables específicas para balanceadores
ansible_ssh_private_key_file=../demo-key.pem
nginx_port=80
backend_servers=web1.example.com,web2.example.com,web3.example.com
server_role=loadbalancer

# ==============================================
# GRUPOS LÓGICOS (Meta-grupos)
# ==============================================

# Todos los servidores de producción
[production:children]
webservers
dbservers
loadbalancers

# Servidores que manejan tráfico público
[frontend:children]
webservers
loadbalancers

# Servidores de backend (internos)
[backend:children]
dbservers

# Servidores en la región US-East
[us_east:children]
webservers
dbservers

# Servidores en la región US-West (ejemplo para escalabilidad)
[us_west]
web-west1.example.com ansible_host=10.1.1.10 ansible_user=ec2-user
db-west1.example.com  ansible_host=10.1.2.10 ansible_user=ec2-user

# ==============================================
# VARIABLES GLOBALES
# ==============================================
[all:vars]
# Variables que aplican a todos los hosts
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
ansible_python_interpreter=/usr/bin/python3

# Configuración de conexión SSH
ansible_ssh_timeout=30
ansible_ssh_retries=3

# Variables del entorno
environment=production
project=terraform-ansible-lab
team=devops

# Configuración de seguridad
security_updates=true
firewall_enabled=true

# ==============================================
# CONFIGURACIÓN PARA TERRAFORM INTEGRATION
# ==============================================

# Host dinámico para integración con Terraform
# Se utilizará el archivo hosts-ready.ini generado por run.sh
[dynamic_hosts]
# Este grupo se populará dinámicamente desde ip.txt
{{ public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=../demo-key.pem

# ==============================================
# EJEMPLOS DE CONFIGURACIÓN AVANZADA
# ==============================================

# Configuración por roles específicos
[webservers_apache]
web1.example.com
web2.example.com

[webservers_nginx] 
web3.example.com

# Configuración por ambiente
[staging]
staging-web.example.com ansible_host=10.0.10.10 ansible_user=ec2-user

[development]
dev-web.example.com ansible_host=10.0.20.10 ansible_user=ec2-user

# Variables por ambiente
[staging:vars]
environment=staging
debug_mode=true

[development:vars]
environment=development
debug_mode=true
log_level=debug
