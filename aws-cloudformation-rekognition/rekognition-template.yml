AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda + Rekognition + API Gateway for image classification

Resources:

  RekognitionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RekognitionLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RekognitionLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RekognitionLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RekognitionImageLabeler
      Handler: index.lambda_handler
      Role: !GetAtt RekognitionLambdaRole.Arn
      Runtime: python3.12
      Timeout: 10
      MemorySize: 256
      Code:
        ZipFile: |
          import boto3
          import base64
          import json

          rekognition = boto3.client('rekognition')

          def lambda_handler(event, context):
              try:
                  # Obtener el tipo de contenido del encabezado
                  content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type', '')

                  if 'application/json' not in content_type:
                      raise Exception("Unsupported Content-Type. Only application/json is allowed.")

                  body = event['body']
                  if isinstance(body, bytes):
                      body = body.decode("utf-8")

                  if event.get("isBase64Encoded", False):
                      body = base64.b64decode(body).decode("utf-8")

                  json_body = json.loads(body)

                  if "image" not in json_body:
                      raise Exception("Missing 'image' in JSON body.")

                  image_bytes = base64.b64decode(json_body['image'])

                  response = rekognition.detect_labels(
                      Image={'Bytes': image_bytes},
                      MaxLabels=5,
                      MinConfidence=70
                  )

                  labels = [label['Name'] for label in response['Labels']]

                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json",
                          "Access-Control-Allow-Origin": "*"
                      },
                      "body": json.dumps({"labels": labels})
                  }

              except Exception as e:
                  return {
                      "statusCode": 400,
                      "headers": {
                          "Content-Type": "application/json",
                          "Access-Control-Allow-Origin": "*"
                      },
                      "body": json.dumps({"error": str(e)})
                  }


  RekognitionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RekognitionApi
      BinaryMediaTypes:
        - multipart/form-data
        - application/octet-stream

  RekognitionApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RekognitionApi.RootResourceId
      PathPart: detect
      RestApiId: !Ref RekognitionApi

  RekognitionApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RekognitionApi
      ResourceId: !Ref RekognitionApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub: 
            - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt RekognitionLambdaFunction.Arn

  RekognitionApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RekognitionApiMethod
    Properties:
      RestApiId: !Ref RekognitionApi
      StageName: prod

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RekognitionLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RekognitionApi}/*/POST/detect

Outputs:
  ApiEndpoint:
    Description: "API endpoint to invoke Lambda via POST"
    Value: 
      Fn::Sub: https://${RekognitionApi}.execute-api.${AWS::Region}.amazonaws.com/prod/detect
